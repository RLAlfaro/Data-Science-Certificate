#definimos el modelotrainloader = torch.utils.data.DataLoader(trainset, batch_size=64, shuffle=True) #generamos un iterador utilizando pytorchoptimizer = optim.SGD(model.parameters(), lr=0.01) #definimos el optimizador con los parametros a actualizarfor inputs,labels in trainloader:outputs = model(inputs) # foward pass (para generar el output de nuestra red neuronal, probabilidades)loss = criterion(outputs,labels) #computo de la funcion de perdidaloss.backward() # Retropropagacionoptimizer.step() # Para la actualizacion de los pesos

04/25
!wget https://archive.ics.uci.edu/ml/machine-learning-databases/00381/PRSA_data_2010.1.1-2014.12.31.csv


04/27

history = model.fit() # Que es lo que retorna estoplot(history['loss'])plot(history['val_loss'])


